// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: redns_rpc.proto

package redns_rpc

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on DetailedStrayEntity with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DetailedStrayEntity) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DetailedStrayEntity with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DetailedStrayEntityMultiError, or nil if none found.
func (m *DetailedStrayEntity) ValidateAll() error {
	return m.validate(true)
}

func (m *DetailedStrayEntity) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for QName

	// no validation rules for QType

	// no validation rules for Id

	// no validation rules for Rfc1035

	// no validation rules for Expiry

	// no validation rules for RedisKey

	if len(errors) > 0 {
		return DetailedStrayEntityMultiError(errors)
	}

	return nil
}

// DetailedStrayEntityMultiError is an error wrapping multiple validation
// errors returned by DetailedStrayEntity.ValidateAll() if the designated
// constraints aren't met.
type DetailedStrayEntityMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DetailedStrayEntityMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DetailedStrayEntityMultiError) AllErrors() []error { return m }

// DetailedStrayEntityValidationError is the validation error returned by
// DetailedStrayEntity.Validate if the designated constraints aren't met.
type DetailedStrayEntityValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DetailedStrayEntityValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DetailedStrayEntityValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DetailedStrayEntityValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DetailedStrayEntityValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DetailedStrayEntityValidationError) ErrorName() string {
	return "DetailedStrayEntityValidationError"
}

// Error satisfies the builtin error interface
func (e DetailedStrayEntityValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDetailedStrayEntity.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DetailedStrayEntityValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DetailedStrayEntityValidationError{}

// Validate checks the field values on RRidentifier with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RRidentifier) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RRidentifier with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RRidentifierMultiError, or
// nil if none found.
func (m *RRidentifier) ValidateAll() error {
	return m.validate(true)
}

func (m *RRidentifier) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for QName

	// no validation rules for QType

	if len(errors) > 0 {
		return RRidentifierMultiError(errors)
	}

	return nil
}

// RRidentifierMultiError is an error wrapping multiple validation errors
// returned by RRidentifier.ValidateAll() if the designated constraints aren't met.
type RRidentifierMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RRidentifierMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RRidentifierMultiError) AllErrors() []error { return m }

// RRidentifierValidationError is the validation error returned by
// RRidentifier.Validate if the designated constraints aren't met.
type RRidentifierValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RRidentifierValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RRidentifierValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RRidentifierValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RRidentifierValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RRidentifierValidationError) ErrorName() string { return "RRidentifierValidationError" }

// Error satisfies the builtin error interface
func (e RRidentifierValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRRidentifier.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RRidentifierValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RRidentifierValidationError{}

// Validate checks the field values on StrayEntity2 with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *StrayEntity2) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StrayEntity2 with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in StrayEntity2MultiError, or
// nil if none found.
func (m *StrayEntity2) ValidateAll() error {
	return m.validate(true)
}

func (m *StrayEntity2) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	switch v := m.Selector.(type) {
	case *StrayEntity2_Identifier:
		if v == nil {
			err := StrayEntity2ValidationError{
				field:  "Selector",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetIdentifier()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StrayEntity2ValidationError{
						field:  "Identifier",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StrayEntity2ValidationError{
						field:  "Identifier",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetIdentifier()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StrayEntity2ValidationError{
					field:  "Identifier",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *StrayEntity2_Rfc1035:
		if v == nil {
			err := StrayEntity2ValidationError{
				field:  "Selector",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for Rfc1035
	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return StrayEntity2MultiError(errors)
	}

	return nil
}

// StrayEntity2MultiError is an error wrapping multiple validation errors
// returned by StrayEntity2.ValidateAll() if the designated constraints aren't met.
type StrayEntity2MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StrayEntity2MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StrayEntity2MultiError) AllErrors() []error { return m }

// StrayEntity2ValidationError is the validation error returned by
// StrayEntity2.Validate if the designated constraints aren't met.
type StrayEntity2ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StrayEntity2ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StrayEntity2ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StrayEntity2ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StrayEntity2ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StrayEntity2ValidationError) ErrorName() string { return "StrayEntity2ValidationError" }

// Error satisfies the builtin error interface
func (e StrayEntity2ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStrayEntity2.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StrayEntity2ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StrayEntity2ValidationError{}

// Validate checks the field values on StrayEntity with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *StrayEntity) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StrayEntity with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in StrayEntityMultiError, or
// nil if none found.
func (m *StrayEntity) ValidateAll() error {
	return m.validate(true)
}

func (m *StrayEntity) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for QName

	// no validation rules for QType

	// no validation rules for Id

	if len(errors) > 0 {
		return StrayEntityMultiError(errors)
	}

	return nil
}

// StrayEntityMultiError is an error wrapping multiple validation errors
// returned by StrayEntity.ValidateAll() if the designated constraints aren't met.
type StrayEntityMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StrayEntityMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StrayEntityMultiError) AllErrors() []error { return m }

// StrayEntityValidationError is the validation error returned by
// StrayEntity.Validate if the designated constraints aren't met.
type StrayEntityValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StrayEntityValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StrayEntityValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StrayEntityValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StrayEntityValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StrayEntityValidationError) ErrorName() string { return "StrayEntityValidationError" }

// Error satisfies the builtin error interface
func (e StrayEntityValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStrayEntity.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StrayEntityValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StrayEntityValidationError{}

// Validate checks the field values on StrayDeleteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StrayDeleteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StrayDeleteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StrayDeleteRequestMultiError, or nil if none found.
func (m *StrayDeleteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *StrayDeleteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for QName

	// no validation rules for QType

	// no validation rules for Id

	if len(errors) > 0 {
		return StrayDeleteRequestMultiError(errors)
	}

	return nil
}

// StrayDeleteRequestMultiError is an error wrapping multiple validation errors
// returned by StrayDeleteRequest.ValidateAll() if the designated constraints
// aren't met.
type StrayDeleteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StrayDeleteRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StrayDeleteRequestMultiError) AllErrors() []error { return m }

// StrayDeleteRequestValidationError is the validation error returned by
// StrayDeleteRequest.Validate if the designated constraints aren't met.
type StrayDeleteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StrayDeleteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StrayDeleteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StrayDeleteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StrayDeleteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StrayDeleteRequestValidationError) ErrorName() string {
	return "StrayDeleteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e StrayDeleteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStrayDeleteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StrayDeleteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StrayDeleteRequestValidationError{}

// Validate checks the field values on StrayDeleteResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StrayDeleteResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StrayDeleteResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StrayDeleteResponseMultiError, or nil if none found.
func (m *StrayDeleteResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *StrayDeleteResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Server

	// no validation rules for RowsAffected

	if len(errors) > 0 {
		return StrayDeleteResponseMultiError(errors)
	}

	return nil
}

// StrayDeleteResponseMultiError is an error wrapping multiple validation
// errors returned by StrayDeleteResponse.ValidateAll() if the designated
// constraints aren't met.
type StrayDeleteResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StrayDeleteResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StrayDeleteResponseMultiError) AllErrors() []error { return m }

// StrayDeleteResponseValidationError is the validation error returned by
// StrayDeleteResponse.Validate if the designated constraints aren't met.
type StrayDeleteResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StrayDeleteResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StrayDeleteResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StrayDeleteResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StrayDeleteResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StrayDeleteResponseValidationError) ErrorName() string {
	return "StrayDeleteResponseValidationError"
}

// Error satisfies the builtin error interface
func (e StrayDeleteResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStrayDeleteResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StrayDeleteResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StrayDeleteResponseValidationError{}

// Validate checks the field values on PerServerStrayDeleteByIdResult with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PerServerStrayDeleteByIdResult) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PerServerStrayDeleteByIdResult with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// PerServerStrayDeleteByIdResultMultiError, or nil if none found.
func (m *PerServerStrayDeleteByIdResult) ValidateAll() error {
	return m.validate(true)
}

func (m *PerServerStrayDeleteByIdResult) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PerServerStrayDeleteByIdResultValidationError{
					field:  "Request",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PerServerStrayDeleteByIdResultValidationError{
					field:  "Request",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PerServerStrayDeleteByIdResultValidationError{
				field:  "Request",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetResults() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PerServerStrayDeleteByIdResultValidationError{
						field:  fmt.Sprintf("Results[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PerServerStrayDeleteByIdResultValidationError{
						field:  fmt.Sprintf("Results[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PerServerStrayDeleteByIdResultValidationError{
					field:  fmt.Sprintf("Results[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PerServerStrayDeleteByIdResultMultiError(errors)
	}

	return nil
}

// PerServerStrayDeleteByIdResultMultiError is an error wrapping multiple
// validation errors returned by PerServerStrayDeleteByIdResult.ValidateAll()
// if the designated constraints aren't met.
type PerServerStrayDeleteByIdResultMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PerServerStrayDeleteByIdResultMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PerServerStrayDeleteByIdResultMultiError) AllErrors() []error { return m }

// PerServerStrayDeleteByIdResultValidationError is the validation error
// returned by PerServerStrayDeleteByIdResult.Validate if the designated
// constraints aren't met.
type PerServerStrayDeleteByIdResultValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PerServerStrayDeleteByIdResultValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PerServerStrayDeleteByIdResultValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PerServerStrayDeleteByIdResultValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PerServerStrayDeleteByIdResultValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PerServerStrayDeleteByIdResultValidationError) ErrorName() string {
	return "PerServerStrayDeleteByIdResultValidationError"
}

// Error satisfies the builtin error interface
func (e PerServerStrayDeleteByIdResultValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPerServerStrayDeleteByIdResult.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PerServerStrayDeleteByIdResultValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PerServerStrayDeleteByIdResultValidationError{}

// Validate checks the field values on StrayByValueRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StrayByValueRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StrayByValueRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StrayByValueRequestMultiError, or nil if none found.
func (m *StrayByValueRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *StrayByValueRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Rfc1035

	if len(errors) > 0 {
		return StrayByValueRequestMultiError(errors)
	}

	return nil
}

// StrayByValueRequestMultiError is an error wrapping multiple validation
// errors returned by StrayByValueRequest.ValidateAll() if the designated
// constraints aren't met.
type StrayByValueRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StrayByValueRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StrayByValueRequestMultiError) AllErrors() []error { return m }

// StrayByValueRequestValidationError is the validation error returned by
// StrayByValueRequest.Validate if the designated constraints aren't met.
type StrayByValueRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StrayByValueRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StrayByValueRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StrayByValueRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StrayByValueRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StrayByValueRequestValidationError) ErrorName() string {
	return "StrayByValueRequestValidationError"
}

// Error satisfies the builtin error interface
func (e StrayByValueRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStrayByValueRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StrayByValueRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StrayByValueRequestValidationError{}

// Validate checks the field values on StrayDeleteResponses with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StrayDeleteResponses) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StrayDeleteResponses with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StrayDeleteResponsesMultiError, or nil if none found.
func (m *StrayDeleteResponses) ValidateAll() error {
	return m.validate(true)
}

func (m *StrayDeleteResponses) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetResults() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StrayDeleteResponsesValidationError{
						field:  fmt.Sprintf("Results[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StrayDeleteResponsesValidationError{
						field:  fmt.Sprintf("Results[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StrayDeleteResponsesValidationError{
					field:  fmt.Sprintf("Results[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return StrayDeleteResponsesMultiError(errors)
	}

	return nil
}

// StrayDeleteResponsesMultiError is an error wrapping multiple validation
// errors returned by StrayDeleteResponses.ValidateAll() if the designated
// constraints aren't met.
type StrayDeleteResponsesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StrayDeleteResponsesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StrayDeleteResponsesMultiError) AllErrors() []error { return m }

// StrayDeleteResponsesValidationError is the validation error returned by
// StrayDeleteResponses.Validate if the designated constraints aren't met.
type StrayDeleteResponsesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StrayDeleteResponsesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StrayDeleteResponsesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StrayDeleteResponsesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StrayDeleteResponsesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StrayDeleteResponsesValidationError) ErrorName() string {
	return "StrayDeleteResponsesValidationError"
}

// Error satisfies the builtin error interface
func (e StrayDeleteResponsesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStrayDeleteResponses.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StrayDeleteResponsesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StrayDeleteResponsesValidationError{}

// Validate checks the field values on StrayModifyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StrayModifyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StrayModifyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StrayModifyRequestMultiError, or nil if none found.
func (m *StrayModifyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *StrayModifyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Rfc1035

	// no validation rules for AllowOverwrite

	if m.Expiry != nil {
		// no validation rules for Expiry
	}

	if len(errors) > 0 {
		return StrayModifyRequestMultiError(errors)
	}

	return nil
}

// StrayModifyRequestMultiError is an error wrapping multiple validation errors
// returned by StrayModifyRequest.ValidateAll() if the designated constraints
// aren't met.
type StrayModifyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StrayModifyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StrayModifyRequestMultiError) AllErrors() []error { return m }

// StrayModifyRequestValidationError is the validation error returned by
// StrayModifyRequest.Validate if the designated constraints aren't met.
type StrayModifyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StrayModifyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StrayModifyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StrayModifyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StrayModifyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StrayModifyRequestValidationError) ErrorName() string {
	return "StrayModifyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e StrayModifyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStrayModifyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StrayModifyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StrayModifyRequestValidationError{}

// Validate checks the field values on StrayModifyRequests with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StrayModifyRequests) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StrayModifyRequests with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StrayModifyRequestsMultiError, or nil if none found.
func (m *StrayModifyRequests) ValidateAll() error {
	return m.validate(true)
}

func (m *StrayModifyRequests) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetReqs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StrayModifyRequestsValidationError{
						field:  fmt.Sprintf("Reqs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StrayModifyRequestsValidationError{
						field:  fmt.Sprintf("Reqs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StrayModifyRequestsValidationError{
					field:  fmt.Sprintf("Reqs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return StrayModifyRequestsMultiError(errors)
	}

	return nil
}

// StrayModifyRequestsMultiError is an error wrapping multiple validation
// errors returned by StrayModifyRequests.ValidateAll() if the designated
// constraints aren't met.
type StrayModifyRequestsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StrayModifyRequestsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StrayModifyRequestsMultiError) AllErrors() []error { return m }

// StrayModifyRequestsValidationError is the validation error returned by
// StrayModifyRequests.Validate if the designated constraints aren't met.
type StrayModifyRequestsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StrayModifyRequestsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StrayModifyRequestsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StrayModifyRequestsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StrayModifyRequestsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StrayModifyRequestsValidationError) ErrorName() string {
	return "StrayModifyRequestsValidationError"
}

// Error satisfies the builtin error interface
func (e StrayModifyRequestsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStrayModifyRequests.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StrayModifyRequestsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StrayModifyRequestsValidationError{}

// Validate checks the field values on StrayModifyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StrayModifyResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StrayModifyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StrayModifyResponseMultiError, or nil if none found.
func (m *StrayModifyResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *StrayModifyResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StrayModifyResponseValidationError{
					field:  "Request",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StrayModifyResponseValidationError{
					field:  "Request",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StrayModifyResponseValidationError{
				field:  "Request",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Result

	if len(errors) > 0 {
		return StrayModifyResponseMultiError(errors)
	}

	return nil
}

// StrayModifyResponseMultiError is an error wrapping multiple validation
// errors returned by StrayModifyResponse.ValidateAll() if the designated
// constraints aren't met.
type StrayModifyResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StrayModifyResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StrayModifyResponseMultiError) AllErrors() []error { return m }

// StrayModifyResponseValidationError is the validation error returned by
// StrayModifyResponse.Validate if the designated constraints aren't met.
type StrayModifyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StrayModifyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StrayModifyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StrayModifyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StrayModifyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StrayModifyResponseValidationError) ErrorName() string {
	return "StrayModifyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e StrayModifyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStrayModifyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StrayModifyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StrayModifyResponseValidationError{}

// Validate checks the field values on StrayModifyResponses with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StrayModifyResponses) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StrayModifyResponses with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StrayModifyResponsesMultiError, or nil if none found.
func (m *StrayModifyResponses) ValidateAll() error {
	return m.validate(true)
}

func (m *StrayModifyResponses) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetReqs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StrayModifyResponsesValidationError{
						field:  fmt.Sprintf("Reqs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StrayModifyResponsesValidationError{
						field:  fmt.Sprintf("Reqs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StrayModifyResponsesValidationError{
					field:  fmt.Sprintf("Reqs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return StrayModifyResponsesMultiError(errors)
	}

	return nil
}

// StrayModifyResponsesMultiError is an error wrapping multiple validation
// errors returned by StrayModifyResponses.ValidateAll() if the designated
// constraints aren't met.
type StrayModifyResponsesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StrayModifyResponsesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StrayModifyResponsesMultiError) AllErrors() []error { return m }

// StrayModifyResponsesValidationError is the validation error returned by
// StrayModifyResponses.Validate if the designated constraints aren't met.
type StrayModifyResponsesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StrayModifyResponsesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StrayModifyResponsesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StrayModifyResponsesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StrayModifyResponsesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StrayModifyResponsesValidationError) ErrorName() string {
	return "StrayModifyResponsesValidationError"
}

// Error satisfies the builtin error interface
func (e StrayModifyResponsesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStrayModifyResponses.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StrayModifyResponsesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StrayModifyResponsesValidationError{}

// Validate checks the field values on ResultMsg with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ResultMsg) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResultMsg with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ResultMsgMultiError, or nil
// if none found.
func (m *ResultMsg) ValidateAll() error {
	return m.validate(true)
}

func (m *ResultMsg) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Message != nil {
		// no validation rules for Message
	}

	if len(errors) > 0 {
		return ResultMsgMultiError(errors)
	}

	return nil
}

// ResultMsgMultiError is an error wrapping multiple validation errors returned
// by ResultMsg.ValidateAll() if the designated constraints aren't met.
type ResultMsgMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResultMsgMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResultMsgMultiError) AllErrors() []error { return m }

// ResultMsgValidationError is the validation error returned by
// ResultMsg.Validate if the designated constraints aren't met.
type ResultMsgValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResultMsgValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResultMsgValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResultMsgValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResultMsgValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResultMsgValidationError) ErrorName() string { return "ResultMsgValidationError" }

// Error satisfies the builtin error interface
func (e ResultMsgValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResultMsg.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResultMsgValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResultMsgValidationError{}

// Validate checks the field values on AddGenerationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddGenerationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddGenerationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddGenerationRequestMultiError, or nil if none found.
func (m *AddGenerationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddGenerationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return AddGenerationRequestMultiError(errors)
	}

	return nil
}

// AddGenerationRequestMultiError is an error wrapping multiple validation
// errors returned by AddGenerationRequest.ValidateAll() if the designated
// constraints aren't met.
type AddGenerationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddGenerationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddGenerationRequestMultiError) AllErrors() []error { return m }

// AddGenerationRequestValidationError is the validation error returned by
// AddGenerationRequest.Validate if the designated constraints aren't met.
type AddGenerationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddGenerationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddGenerationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddGenerationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddGenerationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddGenerationRequestValidationError) ErrorName() string {
	return "AddGenerationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddGenerationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddGenerationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddGenerationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddGenerationRequestValidationError{}

// Validate checks the field values on AddGenerationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddGenerationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddGenerationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddGenerationResponseMultiError, or nil if none found.
func (m *AddGenerationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddGenerationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AffectedRecordsCount

	if len(errors) > 0 {
		return AddGenerationResponseMultiError(errors)
	}

	return nil
}

// AddGenerationResponseMultiError is an error wrapping multiple validation
// errors returned by AddGenerationResponse.ValidateAll() if the designated
// constraints aren't met.
type AddGenerationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddGenerationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddGenerationResponseMultiError) AllErrors() []error { return m }

// AddGenerationResponseValidationError is the validation error returned by
// AddGenerationResponse.Validate if the designated constraints aren't met.
type AddGenerationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddGenerationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddGenerationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddGenerationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddGenerationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddGenerationResponseValidationError) ErrorName() string {
	return "AddGenerationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddGenerationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddGenerationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddGenerationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddGenerationResponseValidationError{}

// Validate checks the field values on Rfc1035 with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Rfc1035) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Rfc1035 with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in Rfc1035MultiError, or nil if none found.
func (m *Rfc1035) ValidateAll() error {
	return m.validate(true)
}

func (m *Rfc1035) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Rfc1035

	if len(errors) > 0 {
		return Rfc1035MultiError(errors)
	}

	return nil
}

// Rfc1035MultiError is an error wrapping multiple validation errors returned
// by Rfc1035.ValidateAll() if the designated constraints aren't met.
type Rfc1035MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Rfc1035MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Rfc1035MultiError) AllErrors() []error { return m }

// Rfc1035ValidationError is the validation error returned by Rfc1035.Validate
// if the designated constraints aren't met.
type Rfc1035ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Rfc1035ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Rfc1035ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Rfc1035ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Rfc1035ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Rfc1035ValidationError) ErrorName() string { return "Rfc1035ValidationError" }

// Error satisfies the builtin error interface
func (e Rfc1035ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRfc1035.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Rfc1035ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Rfc1035ValidationError{}

// Validate checks the field values on DeleteGenerationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteGenerationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteGenerationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteGenerationRequestMultiError, or nil if none found.
func (m *DeleteGenerationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteGenerationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteGenerationRequestMultiError(errors)
	}

	return nil
}

// DeleteGenerationRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteGenerationRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteGenerationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteGenerationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteGenerationRequestMultiError) AllErrors() []error { return m }

// DeleteGenerationRequestValidationError is the validation error returned by
// DeleteGenerationRequest.Validate if the designated constraints aren't met.
type DeleteGenerationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteGenerationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteGenerationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteGenerationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteGenerationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteGenerationRequestValidationError) ErrorName() string {
	return "DeleteGenerationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteGenerationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteGenerationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteGenerationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteGenerationRequestValidationError{}

// Validate checks the field values on RednsGenerationDeleteResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RednsGenerationDeleteResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RednsGenerationDeleteResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// RednsGenerationDeleteResponseMultiError, or nil if none found.
func (m *RednsGenerationDeleteResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RednsGenerationDeleteResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Server

	// no validation rules for AffectedRecordsCount

	if len(errors) > 0 {
		return RednsGenerationDeleteResponseMultiError(errors)
	}

	return nil
}

// RednsGenerationDeleteResponseMultiError is an error wrapping multiple
// validation errors returned by RednsGenerationDeleteResponse.ValidateAll()
// if the designated constraints aren't met.
type RednsGenerationDeleteResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RednsGenerationDeleteResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RednsGenerationDeleteResponseMultiError) AllErrors() []error { return m }

// RednsGenerationDeleteResponseValidationError is the validation error
// returned by RednsGenerationDeleteResponse.Validate if the designated
// constraints aren't met.
type RednsGenerationDeleteResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RednsGenerationDeleteResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RednsGenerationDeleteResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RednsGenerationDeleteResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RednsGenerationDeleteResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RednsGenerationDeleteResponseValidationError) ErrorName() string {
	return "RednsGenerationDeleteResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RednsGenerationDeleteResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRednsGenerationDeleteResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RednsGenerationDeleteResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RednsGenerationDeleteResponseValidationError{}

// Validate checks the field values on PerServerRednsGenerationDeleteByIdResult
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *PerServerRednsGenerationDeleteByIdResult) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// PerServerRednsGenerationDeleteByIdResult with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// PerServerRednsGenerationDeleteByIdResultMultiError, or nil if none found.
func (m *PerServerRednsGenerationDeleteByIdResult) ValidateAll() error {
	return m.validate(true)
}

func (m *PerServerRednsGenerationDeleteByIdResult) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetResults() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PerServerRednsGenerationDeleteByIdResultValidationError{
						field:  fmt.Sprintf("Results[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PerServerRednsGenerationDeleteByIdResultValidationError{
						field:  fmt.Sprintf("Results[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PerServerRednsGenerationDeleteByIdResultValidationError{
					field:  fmt.Sprintf("Results[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PerServerRednsGenerationDeleteByIdResultMultiError(errors)
	}

	return nil
}

// PerServerRednsGenerationDeleteByIdResultMultiError is an error wrapping
// multiple validation errors returned by
// PerServerRednsGenerationDeleteByIdResult.ValidateAll() if the designated
// constraints aren't met.
type PerServerRednsGenerationDeleteByIdResultMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PerServerRednsGenerationDeleteByIdResultMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PerServerRednsGenerationDeleteByIdResultMultiError) AllErrors() []error { return m }

// PerServerRednsGenerationDeleteByIdResultValidationError is the validation
// error returned by PerServerRednsGenerationDeleteByIdResult.Validate if the
// designated constraints aren't met.
type PerServerRednsGenerationDeleteByIdResultValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PerServerRednsGenerationDeleteByIdResultValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PerServerRednsGenerationDeleteByIdResultValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PerServerRednsGenerationDeleteByIdResultValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PerServerRednsGenerationDeleteByIdResultValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PerServerRednsGenerationDeleteByIdResultValidationError) ErrorName() string {
	return "PerServerRednsGenerationDeleteByIdResultValidationError"
}

// Error satisfies the builtin error interface
func (e PerServerRednsGenerationDeleteByIdResultValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPerServerRednsGenerationDeleteByIdResult.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PerServerRednsGenerationDeleteByIdResultValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PerServerRednsGenerationDeleteByIdResultValidationError{}
