// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: redns_rpc.proto

package redns_rpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Stray_AddStray_FullMethodName           = "/y7_redns_apiserver_v1.Stray/AddStray"
	Stray_AddStrays_FullMethodName          = "/y7_redns_apiserver_v1.Stray/AddStrays"
	Stray_ListStrays_FullMethodName         = "/y7_redns_apiserver_v1.Stray/ListStrays"
	Stray_DeleteStrayById_FullMethodName    = "/y7_redns_apiserver_v1.Stray/DeleteStrayById"
	Stray_DeleteStrayByValue_FullMethodName = "/y7_redns_apiserver_v1.Stray/DeleteStrayByValue"
	Stray_ModifyStray_FullMethodName        = "/y7_redns_apiserver_v1.Stray/ModifyStray"
)

// StrayClient is the client API for Stray service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StrayClient interface {
	AddStray(ctx context.Context, in *StrayModifyRequests, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AddStrays(ctx context.Context, opts ...grpc.CallOption) (Stray_AddStraysClient, error)
	ListStrays(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (Stray_ListStraysClient, error)
	DeleteStrayById(ctx context.Context, in *StrayEntity, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteStrayByValue(ctx context.Context, in *StrayByValueRequest, opts ...grpc.CallOption) (*StrayDeleteResponses, error)
	ModifyStray(ctx context.Context, in *StrayModifyRequest, opts ...grpc.CallOption) (*ResultMsg, error)
}

type strayClient struct {
	cc grpc.ClientConnInterface
}

func NewStrayClient(cc grpc.ClientConnInterface) StrayClient {
	return &strayClient{cc}
}

func (c *strayClient) AddStray(ctx context.Context, in *StrayModifyRequests, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Stray_AddStray_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *strayClient) AddStrays(ctx context.Context, opts ...grpc.CallOption) (Stray_AddStraysClient, error) {
	stream, err := c.cc.NewStream(ctx, &Stray_ServiceDesc.Streams[0], Stray_AddStrays_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &strayAddStraysClient{stream}
	return x, nil
}

type Stray_AddStraysClient interface {
	Send(*StrayModifyRequests) error
	CloseAndRecv() (*emptypb.Empty, error)
	grpc.ClientStream
}

type strayAddStraysClient struct {
	grpc.ClientStream
}

func (x *strayAddStraysClient) Send(m *StrayModifyRequests) error {
	return x.ClientStream.SendMsg(m)
}

func (x *strayAddStraysClient) CloseAndRecv() (*emptypb.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(emptypb.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *strayClient) ListStrays(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (Stray_ListStraysClient, error) {
	stream, err := c.cc.NewStream(ctx, &Stray_ServiceDesc.Streams[1], Stray_ListStrays_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &strayListStraysClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Stray_ListStraysClient interface {
	Recv() (*DetailedStrayEntity, error)
	grpc.ClientStream
}

type strayListStraysClient struct {
	grpc.ClientStream
}

func (x *strayListStraysClient) Recv() (*DetailedStrayEntity, error) {
	m := new(DetailedStrayEntity)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *strayClient) DeleteStrayById(ctx context.Context, in *StrayEntity, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Stray_DeleteStrayById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *strayClient) DeleteStrayByValue(ctx context.Context, in *StrayByValueRequest, opts ...grpc.CallOption) (*StrayDeleteResponses, error) {
	out := new(StrayDeleteResponses)
	err := c.cc.Invoke(ctx, Stray_DeleteStrayByValue_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *strayClient) ModifyStray(ctx context.Context, in *StrayModifyRequest, opts ...grpc.CallOption) (*ResultMsg, error) {
	out := new(ResultMsg)
	err := c.cc.Invoke(ctx, Stray_ModifyStray_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StrayServer is the server API for Stray service.
// All implementations must embed UnimplementedStrayServer
// for forward compatibility
type StrayServer interface {
	AddStray(context.Context, *StrayModifyRequests) (*emptypb.Empty, error)
	AddStrays(Stray_AddStraysServer) error
	ListStrays(*emptypb.Empty, Stray_ListStraysServer) error
	DeleteStrayById(context.Context, *StrayEntity) (*emptypb.Empty, error)
	DeleteStrayByValue(context.Context, *StrayByValueRequest) (*StrayDeleteResponses, error)
	ModifyStray(context.Context, *StrayModifyRequest) (*ResultMsg, error)
	mustEmbedUnimplementedStrayServer()
}

// UnimplementedStrayServer must be embedded to have forward compatible implementations.
type UnimplementedStrayServer struct {
}

func (UnimplementedStrayServer) AddStray(context.Context, *StrayModifyRequests) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddStray not implemented")
}
func (UnimplementedStrayServer) AddStrays(Stray_AddStraysServer) error {
	return status.Errorf(codes.Unimplemented, "method AddStrays not implemented")
}
func (UnimplementedStrayServer) ListStrays(*emptypb.Empty, Stray_ListStraysServer) error {
	return status.Errorf(codes.Unimplemented, "method ListStrays not implemented")
}
func (UnimplementedStrayServer) DeleteStrayById(context.Context, *StrayEntity) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteStrayById not implemented")
}
func (UnimplementedStrayServer) DeleteStrayByValue(context.Context, *StrayByValueRequest) (*StrayDeleteResponses, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteStrayByValue not implemented")
}
func (UnimplementedStrayServer) ModifyStray(context.Context, *StrayModifyRequest) (*ResultMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyStray not implemented")
}
func (UnimplementedStrayServer) mustEmbedUnimplementedStrayServer() {}

// UnsafeStrayServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StrayServer will
// result in compilation errors.
type UnsafeStrayServer interface {
	mustEmbedUnimplementedStrayServer()
}

func RegisterStrayServer(s grpc.ServiceRegistrar, srv StrayServer) {
	s.RegisterService(&Stray_ServiceDesc, srv)
}

func _Stray_AddStray_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StrayModifyRequests)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrayServer).AddStray(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Stray_AddStray_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrayServer).AddStray(ctx, req.(*StrayModifyRequests))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stray_AddStrays_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StrayServer).AddStrays(&strayAddStraysServer{stream})
}

type Stray_AddStraysServer interface {
	SendAndClose(*emptypb.Empty) error
	Recv() (*StrayModifyRequests, error)
	grpc.ServerStream
}

type strayAddStraysServer struct {
	grpc.ServerStream
}

func (x *strayAddStraysServer) SendAndClose(m *emptypb.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *strayAddStraysServer) Recv() (*StrayModifyRequests, error) {
	m := new(StrayModifyRequests)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Stray_ListStrays_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StrayServer).ListStrays(m, &strayListStraysServer{stream})
}

type Stray_ListStraysServer interface {
	Send(*DetailedStrayEntity) error
	grpc.ServerStream
}

type strayListStraysServer struct {
	grpc.ServerStream
}

func (x *strayListStraysServer) Send(m *DetailedStrayEntity) error {
	return x.ServerStream.SendMsg(m)
}

func _Stray_DeleteStrayById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StrayEntity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrayServer).DeleteStrayById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Stray_DeleteStrayById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrayServer).DeleteStrayById(ctx, req.(*StrayEntity))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stray_DeleteStrayByValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StrayByValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrayServer).DeleteStrayByValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Stray_DeleteStrayByValue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrayServer).DeleteStrayByValue(ctx, req.(*StrayByValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stray_ModifyStray_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StrayModifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrayServer).ModifyStray(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Stray_ModifyStray_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrayServer).ModifyStray(ctx, req.(*StrayModifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Stray_ServiceDesc is the grpc.ServiceDesc for Stray service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Stray_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "y7_redns_apiserver_v1.Stray",
	HandlerType: (*StrayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddStray",
			Handler:    _Stray_AddStray_Handler,
		},
		{
			MethodName: "DeleteStrayById",
			Handler:    _Stray_DeleteStrayById_Handler,
		},
		{
			MethodName: "DeleteStrayByValue",
			Handler:    _Stray_DeleteStrayByValue_Handler,
		},
		{
			MethodName: "ModifyStray",
			Handler:    _Stray_ModifyStray_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AddStrays",
			Handler:       _Stray_AddStrays_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ListStrays",
			Handler:       _Stray_ListStrays_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "redns_rpc.proto",
}

const (
	Redns_AddGeneration_FullMethodName        = "/y7_redns_apiserver_v1.Redns/AddGeneration"
	Redns_DeleteGenerationById_FullMethodName = "/y7_redns_apiserver_v1.Redns/DeleteGenerationById"
)

// RednsClient is the client API for Redns service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RednsClient interface {
	AddGeneration(ctx context.Context, opts ...grpc.CallOption) (Redns_AddGenerationClient, error)
	DeleteGenerationById(ctx context.Context, in *DeleteGenerationRequest, opts ...grpc.CallOption) (*PerServerRednsGenerationDeleteByIdResult, error)
}

type rednsClient struct {
	cc grpc.ClientConnInterface
}

func NewRednsClient(cc grpc.ClientConnInterface) RednsClient {
	return &rednsClient{cc}
}

func (c *rednsClient) AddGeneration(ctx context.Context, opts ...grpc.CallOption) (Redns_AddGenerationClient, error) {
	stream, err := c.cc.NewStream(ctx, &Redns_ServiceDesc.Streams[0], Redns_AddGeneration_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &rednsAddGenerationClient{stream}
	return x, nil
}

type Redns_AddGenerationClient interface {
	Send(*Rfc1035) error
	CloseAndRecv() (*AddGenerationResponse, error)
	grpc.ClientStream
}

type rednsAddGenerationClient struct {
	grpc.ClientStream
}

func (x *rednsAddGenerationClient) Send(m *Rfc1035) error {
	return x.ClientStream.SendMsg(m)
}

func (x *rednsAddGenerationClient) CloseAndRecv() (*AddGenerationResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(AddGenerationResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *rednsClient) DeleteGenerationById(ctx context.Context, in *DeleteGenerationRequest, opts ...grpc.CallOption) (*PerServerRednsGenerationDeleteByIdResult, error) {
	out := new(PerServerRednsGenerationDeleteByIdResult)
	err := c.cc.Invoke(ctx, Redns_DeleteGenerationById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RednsServer is the server API for Redns service.
// All implementations must embed UnimplementedRednsServer
// for forward compatibility
type RednsServer interface {
	AddGeneration(Redns_AddGenerationServer) error
	DeleteGenerationById(context.Context, *DeleteGenerationRequest) (*PerServerRednsGenerationDeleteByIdResult, error)
	mustEmbedUnimplementedRednsServer()
}

// UnimplementedRednsServer must be embedded to have forward compatible implementations.
type UnimplementedRednsServer struct {
}

func (UnimplementedRednsServer) AddGeneration(Redns_AddGenerationServer) error {
	return status.Errorf(codes.Unimplemented, "method AddGeneration not implemented")
}
func (UnimplementedRednsServer) DeleteGenerationById(context.Context, *DeleteGenerationRequest) (*PerServerRednsGenerationDeleteByIdResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGenerationById not implemented")
}
func (UnimplementedRednsServer) mustEmbedUnimplementedRednsServer() {}

// UnsafeRednsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RednsServer will
// result in compilation errors.
type UnsafeRednsServer interface {
	mustEmbedUnimplementedRednsServer()
}

func RegisterRednsServer(s grpc.ServiceRegistrar, srv RednsServer) {
	s.RegisterService(&Redns_ServiceDesc, srv)
}

func _Redns_AddGeneration_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RednsServer).AddGeneration(&rednsAddGenerationServer{stream})
}

type Redns_AddGenerationServer interface {
	SendAndClose(*AddGenerationResponse) error
	Recv() (*Rfc1035, error)
	grpc.ServerStream
}

type rednsAddGenerationServer struct {
	grpc.ServerStream
}

func (x *rednsAddGenerationServer) SendAndClose(m *AddGenerationResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *rednsAddGenerationServer) Recv() (*Rfc1035, error) {
	m := new(Rfc1035)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Redns_DeleteGenerationById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGenerationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RednsServer).DeleteGenerationById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Redns_DeleteGenerationById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RednsServer).DeleteGenerationById(ctx, req.(*DeleteGenerationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Redns_ServiceDesc is the grpc.ServiceDesc for Redns service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Redns_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "y7_redns_apiserver_v1.Redns",
	HandlerType: (*RednsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DeleteGenerationById",
			Handler:    _Redns_DeleteGenerationById_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AddGeneration",
			Handler:       _Redns_AddGeneration_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "redns_rpc.proto",
}
